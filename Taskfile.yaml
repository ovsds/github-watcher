version: 3

silent: true

includes:
  scripts:
    taskfile: ./.scripts
    dir: ./.scripts
  backend:
    taskfile: ./backend
    dir: ./backend

vars:
  NENV: "node_modules"
  SERVICES: "backend"

tasks:
  _prettier:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/prettier {{.COMMAND}}"

  _with_nvm:
    internal: true
    cmds:
      - "source ${HOME}/.nvm/nvm.sh && nvm install && {{.COMMAND}}"

  init:
    desc: Initialize project environment
    cmds:
      - echo 'Installing node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm install" }

      - echo 'Installing husky pre-commit...'
      - task: _with_nvm
        vars: { COMMAND: "npm run prepare" }

      - echo 'Installing poetry version...'
      - poetry self update {{.POETRY_TARGET_VERSION}}

      - echo 'Installing .scripts dependencies...'
      - task: scripts:init

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:init"
    vars:
      POETRY_TARGET_VERSION:
        sh: cat .poetry-version

  lint:
    desc: Lint project
    cmds:
      - echo 'Running prettier checks...'
      - task: _prettier
        vars: { COMMAND: "--check ." }

      - echo 'Running scripts checks...'
      - task: scripts:lint

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:lint"

  lint-fix:
    desc: Lint fix project
    cmds:
      - echo 'Running prettier fixes...'
      - task: _prettier
        vars: { COMMAND: "--write ." }

      - echo 'Running scripts fixes...'
      - task: scripts:lint-fix

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:lint-fix"

  test:
    desc: Test project
    cmds:
      - echo 'Running tests...'

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:test"

  clean:
    desc: Clean project environment
    cmds:
      - echo 'Cleaning node dependencies...'
      - rm -rf {{.NENV}}

      - echo 'Cleaning .scripts dependencies...'
      - task: scripts:clean

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:clean"

  dependencies-update:
    desc: Update dependencies
    cmds:
      - echo 'Updating node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm update" }
      - task: _with_nvm
        vars: { COMMAND: "npm outdated" }
      - task: _with_nvm
        vars: { COMMAND: "npm audit" }

      - echo 'Updating .scripts dependencies...'
      - task: scripts:dependencies-update

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:dependencies-update"

  update-from-template:
    desc: Update project from template
    cmds:
      - echo 'Updating project from template...'
      - cookiecutter
        --no-input
        --overwrite-if-exists
        --output-dir ../
        {{.TEMPLATE_PATH}}
        project_name="Github Watcher"
        project_slug="github-watcher"
        node_version="v21.5.0"
        owner_name="Dmitry Ovsiannikov"
        owner_github_login="ovsds"
        scripts="true"
        services="backend"
    vars:
      TEMPLATE_PATH: '{{.TEMPLATE_PATH | default "https://github.com/ovsds/template-repository"}}'
